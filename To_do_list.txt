To do list:

(les items suivis d'une �toile (*) sont moins importants, 
on verra si on a le temps � la fin


Login.java:


RestaurantGUI.java:
-refactorer tout le code pour qu'il soit lisible (fait)
-ajouter un bouton "logout" lorsque l'employ� veut quitter (fait)
-changer les couleurs des tables (fait)
	-blanc lorsque la table est libre (par d�faut)
	-vert lorsqu'elle est g�r�e par un autre employ�
	-rouge lorsqu'elle est g�r�e par l'employ� lui-m�me
-clarifier la l�gende pour refl�ter ces choix de couleur (fait)
-Limiter l'acc�s aux tables (� l'aide de m�thode Synchronized) (*)
-Changer la couleur de la table lorqu'un employ� la prend en charge (fait)
-impl�menter le plein �cran


ServiceGUI.java:
-Changer la couleur de la table lorsque la facture est imprim�e (fait)
-Afficher le texte d'une couleur diff�rente lorsque la commande a �t� envoy�e
	aux cuisines � l'aide du bouton valider. (fait)
-Generer un objet de type Facture lorsqu'on appuie sur le bouton facture


MenuGUI.java:
-Afficher la liste des repas offerts en fonction de leur type (entr�e, principal, dessert)
	-j'ai besoin d'une fa�on d'avoir le nombre de plats dans un menu
	 en fonction de son type (entr�e, plat principal, dessert) pour continuer
-Incr�menter la quantit� lors de chaque clic
-Ajouter une fonction qui retourne un objet de type RepasConvive � ServiceGUI
-(...)


CuisineGUI.java:
-refactorer tout le code pour qu'il soit lisible
-changer le constructeur pour qu'il refl�te les items � cuisiner(*)
-cr�er une m�thode pour que le cuisinier indique qu'il a termin� de cuisiner un plat (*)
-cr�er une m�thode qui peut �tre appel�e par ServiceGUI
	qui permet d'ajouter des plats � cuisiner(*)
-Ajouter un chronom�tre qui indique l'heure d'arriv�e des commandes(*)
-impl�menter le plein �cran (*)


Serveur.java:
-impl�menter les serveurs qui fonctionnent comme des Threads (*)
